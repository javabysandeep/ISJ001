What is Java?
- It is a high level programming language.

What is a Program?
    - set of instructions to perform certain task given to the computer.

    multiplication of two numbers:
        19898989898989989 * 17688638277778678

what is a software?
    - it is a group of meaningful programs together.

Types of Software:
    1. System software : OS, Drivers
    2. Application software
        - desktop/standalone Application
            e.g. Calculator, Notepad, Excel
            - to access desktop apps we don't need internet.
            - to develop desktop apps we can use : AWT/SWING/JavaFX

        - web Application
            e.g. youtube, facebook
            - we need internet to access web Application
            -Theses are the Application software which runs on web server[Remote machine]
            - web Application run on a single remote machine
            - to develop web Application we can use:
                - Servlet, JSP, Spring MVC,

        - enterprise Application/Distibuted Application:
            e.g. internet banking, irctc, ERP System
            - we need internet to access enterprise Application
            - these apps run on multiple machines as they are big in nature.
            - to develop enterprise apps we can use: SOAP/REST web services, Spring REST

# Why to use Java?/ Features of Java
1. using Java we can develop Application software
2. We have large community support.
3. Platform independent: software compiled on one machine and that can run on any machine
4. WORA: Write Once Run Anywhere.
     ** C,C++ are platform dependent: C program compiled on windows machine will only run on windows machine
5. Multithread : running multiple blocks of code at the same time.
6. Simple: it is simple as compared C, C++ since most of the complex concepts were removed in Java
7. Secure: 
    - it does not provide direct memory access to the developer.
    - it provides several security managers
    - memory allocation and deallocation is autmatically done by java. Developer is not responsible.
8. Distibuted: with the help of java we can develop distributed Applications
9. Java is strongly typed programming language.
10. Java is a case sensitive programming language


# Variables :
    - It is a name given to a memory location address so that accessing the value from memory becomes easy.
    e.g. int age = 100;


# Data type:
    - it specifies the type data stored in the memory container
    - It specifies the size of container[memory requirement]
    - It specifies the range of allowed values
        e.g. in one byte we can store maximum of 127 value.

# what are the data types available in java?
    - byte, short, int, long [Non-floating or whole number -2,-1, 0,1,2]
    - float, double [floating data or decimal e.g. 10.3F,104.65D]
    - char ['A','B']
    - boolean [true, false]


# Identifier:
    - It is a name given to a variable, method, class, packages

    Rules:
        - Allowed set of characters: A-Z, a-z, 0-9,$, _
        - Should not start with digit.
        - keywords are not allowed
    
    Suggestions/Good naming conventions for Identifier:
        1. We should not use pre-defined class names as Identifier
        2. Upper Camel case naming convention for classes :
            - e.g. MessageService, LoginController, ProductController.
        3. Lowe camel case naming convention for variables, methods, pacakages:
            - e.g. int productQuantity = 100;
                    int numberOfOrdersPlacedToday = 0;
                
# how to perform operations on given data?

Arithemetic operations : +, -, *, /, %

- If we try to divide the non-floating[byte, short, int, long, char] number by zero then we get ArithmeticException divide by zero.
- If we try to divide the floating [float, double] number by zero then we get Infinity as a output
- Arithemetic operations are not allowed for boolean type data.

# + operator:
    1. mathematical addition : when both the operands are of number type
    2. String concatenation : when one of the operand is of String type.

    Expression evaluatio will be done from left to right as per the BODMAS rule

// Operand1       (+, -, *, /, %)        operand2  ----> Result type
// (byte, short, int, char) (+, -, *, /, %) (byte, short, int, char) ---->  int
// (byte, short, int, char, long) (+, -, *, /, %) (byte, short, int, char, long) ---->  long
// (byte, short, int, char, long, float) (+, -, *, /, %) (byte, short, int, char, long, float) ---->  float
// (byte, short, int, char, long, float, double) (+, -, *, /, %) (byte, short, int, char, long, float, double) ---->  double
        
        
# Comparision Operators / Relational Operators
- >, <, >=, <=,==, !=
- for boolean data type only, == and != are applicable
- output of Comparision operator is boolearn true or false

#class components
	1. variables :
		# Variable
		- it is a name given to memory location address
		- using variable we can store the data
		- syntax : data_type variableName = value;
					 int productQuantity = 100;
						- int : data type
						- 100 : value of type integer
						- productQuantity : name of the variable
						- =  : assignment operator

		# Types of variable based content:
			- based on the content we have two typs variable:
			1. Primitive variable :
				- If a variable contains the value of type [byte, short, int, long, double, float, char, boolean]
				- e.g.	 int productQuantity = 100;

			2. Reference variable :
					- If a variable contains a referene/address of an object
				- e.g.	 Student student = new Student();
						- Student : it is a name of the class. Custom data type
						- student : it is a reference variable
						- =  : assignment operator
						- new  : it is a keyword
						- Student(): It is a call given to the constructor in order to create the object

						- new Student(); : It is an object

# Types of variable based usage:
	1. Local variable
	2. Instance variable
	3. static variable

		1. Local variable:
			- what it is ?
					- It is a variable which is created inside the method, constructor, block without any access 						modifier
			- why to use it?
					- It is used to store the data which is temprary/ intermediate results

			- how to access/use the local variable
			    - we access local variables directly without any prefix or suffix

            - Which memory area local variables are stored?
                - Stack memory area

            - When local variables will be created?
                - when method is called

            - When local variables will be deleted?
                - when method execution is complete

            - can we access the local variables outside the method/constructor?
                    - No

            - whether local variables will get the default value?
                    - No
                    - local variables must be initialized before they are used.
# Instance variable:
1. what is an instance variable?
    - It is a variable which is created inside the class without static modifier and outside all other class components

2. why to use instance variables?
    - We use instance variables to store object specific data.

3. how to create and access them?
    - We create them inside the class
        e.g.
            public class Product {
                 int productId;
                 String productName;
                 int productPrice;
             }

4. how many times instance variables will get the memory?
    - everytime object is created.

5. when instance variables will get the memory?
    - instance variables will be created at the time object creation

6. when instance variables will be deleted?
    - when the object is deleted.

7. whether instance variables will get the default value?
    - Yes

8. which memory area instance variables will be stored?
    - HEAP memory area.


# Static variable:
1. what is a Static variable?
    - It is a variable which is created inside the class with static modifier and outside all other class components

2. why to use Static variables?
    - We use Static variables to store common data for all the objects.

3. how to create and access them?
    - We create them inside the class
    - We access static variables with the help of ClassName
     -syntax : ClassName.staticVariableName

        e.g.
            public class Product {
                 static String companyName = "ITC";
             }

4. how many times static variables will get the memory?
    - only once at the of class loading in the memory.

5. when static variables will get the memory?
    - at the of class loading in the memory.

6. when static variables will be deleted?
    - when the class is unloaded from the memory.

7. whether static variables will get the default value?
    - Yes

8. which memory area static variables will be stored?
    - Class or Method memory area.

9. Do we need to object to access static variables?
    - No

- We can access the static variables directly without class name in the same class but if the variable is in different class then we access it with class name

- Even though we are accessing the static variable in the same class we should use classname.

#To access the static variables from the same class we have
1. directly without any name
2. with the help of classname
3. with the help of reference variable

#To access the static variables from the outside class we have
1. with the help of classname
2. with the help of reference variable


#To access the instance variables from the same class we have
1. with the help of reference variable

#To access the instance variables from the outside class we have
1. with the help of reference variable




What is a method?
- it is a group of statements which are enclosed inside the curly braces
  which has name, return type, may accept input also

Types of method:
1. instance method :
    what it is :
        - a method which is created without static modifier
    why to use it:
        - to represent object specific task/behaviour
    how to access it?
        - we need reference variable

2. static method : a method which is created with static modifier

*** We cannot define the methods inside another method/constructor/block
We define method inside the class.


# this keyword:
- What it is ?
    - it is reference variable which refers to the current class object.

- why to use this keyword?
    1. we use this keyword to access current class instance variables, instance methods
    2. we use this keyword to call the current class constructor

# instance block
- what it is?
    - it is a block of code that is written inside the curly braces at class level outside of class components
    - and which does not have name
    - which does not accept parameters
    - no return type
    - without static keyword
   - since it does not have name, we cannot call it explicitly.

- when and how instance block will be executed?
    - it will be executed automatically everytime we create an object of that class
    - when we create an object it is guaranteed that instance block will be executed.

- why to use instance blocks?
    - we use instance blocks to write the non-initialization activity such as
            - auditing, logging,
            - maintaining the object counter
    - it is guaranteed that instance block will be executed everytime object is created.

# static block
what is a static block?
    - it is a block of code that is written inside the curly braces at class level outside of other class components
    - with static keyword
    - and which does not have name
    - which does not accept parameters
    - no return type
- since it does not have name, we cannot call it explicitly.

- when and how static block will be executed?
    - it will be executed automatically when class is loaded in the memory
    - it will be executed only once at the time of class loading

- why to use static blocks?
    - since static blocks will be executed only once at the time of class loading.
    - we write code inside the static block such as one time activity
        - loading the database drivers
        - connecting to the server.

5. nested classes
- what is a nested class:
    - A class which is defined inside another class

- Different types of nested classes:
 1. static nested class
    - what is static nested class?
        - a class which is defined inside another class with static keyword.
    - we can write both static and nonstatic members inside the static nested class.
    - to create static nested class object we need outer classname.

 2. non-static nested class i.e. inner class: instance class
  - what is non-static nested class or inner class?
            - a class which is defined inside another class without static keyword.
 - we cannot write static variables, static methods, static block inside the local inner class

 - How to use inner class?





3. local inner class
     - what is local inner class?
            - a class which is defined inside another method/block/constructor  without static keyword.
    - we define local inner class inside the method/block/constructor and create objects inside the same method/block/constructor and use there itself.
    - we cannot make local inner class as static
    - we cannot write static variables, static methods, static block inside the local inner class



4. anonymous class

# Access specifiers:
	It specifies the visibility or scope of class and its components. Who can access them
	We have different access specifier
	1. public : it can be accessed througout application
	2. private : within the same class
	3. default : within the same package
	4. protected : within the same package

Note: Outer class cannot be private or protected.

Q. Why to use access specifiers?
Ans. To specify who can access the class and class components.

Q.1 What is encapsulation in Java?
Ans.	It is a process of binding data[instance variables] and methods[instance methods] which are acting on the same data.

Q.2 How to implement Encapsulation in Java?
	- We achieve encapsulation by
		- making the data members i.e. instance variables private
		- by accessing them with the help of public getter and setter methods

Q.3 Why to use encapsulation? Advantages of encapsulation
Ans.
	1. we get better control on the data.
	2. Data is safe. it cannot be accessed directly.

Q.4 Drawbacks
Ans.
		1. Lenth of code increases.
		2. program execution becomes slower.

Example:
			class Student {
					private int id;
					private String name;

					//public setter
					public void setId( int id ){ this.id = id;}
					public void setName(String name ){ this.name = name;}

					//public getters
					public int getId(){ return id;}
					public int getName(){ return name;}

			}




