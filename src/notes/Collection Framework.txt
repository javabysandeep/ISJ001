# Collection Framework


# Framework :
	- Predefined set of code
	- Java based framework will contain predefined set of classes, interface, methods
	- solutions provided for set of problems faced.
	- Collection framework comes with standard JDK
	- Spring, Hibernate Selenium frameworks need to addd externally in the project


# Drawbacks of Array :
	1. Array is fixed in size
	2. Either shortage or wastage of memory
	3. We can only store homogeous data
	4. No method supprt. For every requirement such as insert, delete, search sort in a given array developer is suppoed to write code.

# Collection Framework:
	- It is also predefined set of code which contains classes, interfaces, methods
	- All the collection framework classes, interfaces are part of java.util package
	- Solution:
			1. It overcomes the drawbacks of Array.
			2. With the help of collection framework we can store multiple values[objects] which can 						be of same type or different type as a single unit.
			3. With the collection we can store homogeneous as well as hetergoneous data.
			4. Method support is available.
			5. Collections are growable in nature.

	Classes, interfaces ----> Different types of Data Structures [Array, Stack, Queue, LinkedList, Tree...]
	Methods --> Algorithms --> implementation


# Collection Hierarchy : Set of clasess, interfaces

# Iterable(I)
- interface present in java.lang package
- it contains -  public abstract java.util.Iterator<T> iterator();


# Collection(I):
- It is an inteface present inside java.util package which extends java.lang.Iterable
- It has three direct sub-interfaces : List, Set, Queue
- It contains several these below methods:

1. to Add single element :  public abstract boolean add(E);
2. To Add multiple elements: public abstract boolean addAll(java.util.Collection<? extends E>);
3. To remove single element: public abstract boolean remove(java.lang.Object);
4  To remove multiple elements:  public abstract boolean removeAll(java.util.Collection<?>);
5. To remove elements based on condition: public boolean removeIf(java.util.function.Predicate<? super E>);
6. To remove all the elements from a given container:   public abstract void clear();
7. To find the no. elements :  public abstract int size();
8. to check if collection is empty or not: public abstract boolean isEmpty();
9. To check if a given element is there or not :  public abstract boolean contains(java.lang.Object);
10. To check if multiple given elements are there or not :   public abstract boolean containsAll(java.util.Collection<?>);
11. public abstract boolean equals(java.lang.Object);
12. public abstract int hashCode();
13. to get the array from given collection : public abstract <T> T[] toArray(T[]);
14. public abstract java.util.Iterator<E> iterator();
15. To remove the elements except specifed elemenets: public abstract boolean retainAll(java.util.Collection<?>);
16. public java.util.Spliterator<E> spliterator();
17. public java.util.stream.Stream<E> stream();
18. public java.util.stream.Stream<E> parallelStream();


# List (I)
- it is an interface which is present in java.util package
- List extends Collection(I)
- List has 4 implementations : ArrayList, LinkedList, Vector, Stack
- Some extra methods which are there in List :

	When to List implementing classes?
		- List will help us store multiple elements which can be duplicate
		- It will help us maintain insertion order


# ArrayList:
1. It is an implementation List present in java.util package
2. It helps in storing the duplicate elements
3. It maintains the insertion order of elements
4. It can store homogeneous as well as heterogeneous elements
5. Null insertion is possible any number of times.
6. ArrayList is best for retrival of data
7. ArrayList is worst for modification of data.
9. ArrayList internally maintains the growable array data structure.
		Object[] value = new Object[10];
	- ArrayList will maintain initial array of size 10. Once this array is full it will create new array with new capacity
		New Capacity = Old Capacity + Old Capacity * 0.5 + 1;
10. ArrayList methods are not synchronized. ArrayList is not a thread safe class.


# Vector:
1. It is an implementation of List present in java.util package
2. It helps in storing the duplicate elements
3. It maintains the insertion order of elements
4. It can store homogeneous as well as heterogeneous elements
5. Null insertion is possible any number of times.
6. Vector is best for retrival of data
7. Vector is worst for modification of data.
9. Vector internally maintains the growable array data structure.
		Object[] value = new Object[10];
	- Vecotr will maintain initial array of size 10. Once this array is full it will create new array with new capacity
		New Capacity = 2 * Old Capacity;
10. Vector methods are synchronized. Vector is a thread safe class.
11. It is a legacy class. It is not recommended to use it.


# Add,AddAll, remove, removeAll, removeId, clear, contains, containsAll, isEmpty, size, retainAll Collections.sort
Reading from the given collection.

# How to iterate given collection?
Ans.
	1. using traditional for loop
	2. using enhanced for loop
	3. using forEach method by providing lambda expression
	4. using forEach method by providing Method Reference
	5. using Cursors


# LinkedList:
1. It is an implementation of List present in java.util package
2. It helps in storing the duplicate elements
3. It maintains the insertion order of elements
4. It can store homogeneous as well as heterogeneous elements
5. Null insertion is possible any number of times.
6. LinkedList is best for modification of data
7. LinkedList is worst for retrival of data.
8. There is no capacity concept for linkedlist
9. It is working based on doubly linked list data structure.



# Stack
1. It extends Vector and present in java.util package
2. It helps in storing the duplicate elements
3. It maintains the insertion order of elements
4. It can store homogeneous as well as heterogeneous elements
5. Null insertion is possible any number of times.
6. Stack is best for retrival of data
7. Stack is worst for modification of data.
8. It is working based on Stack Data Structure which is implemented using Array
9. It maintains LAST-IN-FIRST-OUT.
10 Methods of stack :
	1. push : to add element on top of the stack
	2. pop : to remove the element from the top
	3. peek: to check the element on top of stack
	4. empty: to check whether stack is empty or not
	5. size: to get size i.e. no. elements present inside the stack.
	6. search: to search an element in a given Stack.




# Set (I)
- It is an interface which extends Collection(I) present in java.util
- It helps us in storing unique elements.

# HashSet:
1. HashSet implements Set interface
2. It stores only unique elements
3. It can store homogeneous as well as heterogeneous elements
4. It can store null element but only once
5. It does not maintain sorting order
6. It does not maintain insertion order
7. It internally uses HashMap
8. It maintains the uniqueness of elements by using equals() and hashCode() methods

# LinkedHashSet:
1. LinedHashSet extends HashSet and implements Set interface
2. It stores only unique elements
3. It can store homogeneous as well as heterogeneous elements
4. It can store null element but only once
5. It does not maintain sorting order
6. It maintains insertion order of elements
7. It internally uses LinkedHashMap
8. It maintains the uniqueness of elements by using equals() and hashCode() methods

# TreeSet:
1. TreeSet implements NaviagbleSet interface
2. It stores only unique elements
3. It can store homogeneous elements only since it maintains sorting order
4. It cannot store null element even once otherwise we get NullPointerExpcetion
5. It maintains sorting order
6. It does not maintain insertion order of elements
7. It internally uses TreeMap
8. It maintains the uniqueness of elements by using Comparable OR Comparator
9. It sorts the elements by using Comparable OR Comparator


Queue:
- Methods:
	1. boolean add(E e);
	2. boolean offer(E e);
	3. E remove();
	4. E poll();
	5. E element();
	6. E peek();


# Insert
	add(e) : Exception
	offer(e) : null

# Remove
	remove() : It will throw NoSuchElementException if we try to remove from empty queue
	poll(): It will return null if we try to remove from empty queue

# Examine
	element():  It will throw NoSuchElementException if we try to inspect from empty queue
	peek() : It will return null if we try to inspect from empty queue















# Cursors:
1. Enumeration(I):
	- It is an interface which contains two methods :

	- hasMoreElements():
			- this returns true or false.
			- This will return true till the time elements are there.

		- nextElement():
			- It returns the element and increase the count i.e. move the cursor to the next element

	- Enumeration is used to read data from legacy classes such Vector, hashtable
	- Enumeration implementation is provided by Vector class by using anonymous class.
	- elements() from Vector gives Enumeration object.

	- With the help of Enumeration we can only read the data in forward direction only.
	- We cannot remove the elements or modify the elements while iterating the elements.

2. Iterator(I):
	- It has three methods:
		- hasNext(): it will return true till the time it has elements else returns false.
		- next(): it returns the element and moves the cursor to the next element.
		- remove(): to remove the element from given collection.

	- with the help of Iterator we can iterate elements of any given Collection subclass.
	- While iterating the elements we can remove the elements also

	- To get the instance of Iterator(I): we use iterator() method from Subclass.


3. ListIterator(I):
	- It extends Iterator(I)
	- It is used to iterate elements from List implementations [AL,LL,Vector, Stack]
	- Methods of ListIterator(I):
		1. public abstract boolean hasNext();
  		2. public abstract E next();
 		3. public abstract boolean hasPrevious();
  		4. public abstract E previous();
  		5. public abstract int nextIndex();
  		6. public abstract int previousIndex();
  		7. public abstract void remove();
 		8. public abstract void set(E);
  		9. public abstract void add(E);

	while iterating we can
		- add new element
		- modify the existing element
		- remove the existing element

	- ListIterator instanc we can get it with the method : listIterator();












