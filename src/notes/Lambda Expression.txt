Lambda Expression: 
 # It is anonymous function which does not name, return type, access specifier, access modifier

# It is used to implement only functional interface.[SAM]
# We can implement functional interfaces using
	- named subclass
	- using inline anonymous class
	- using lambda expression
	- using method reference

- Using lambda expression we can implement functional interface in a shorter, concise way.
# characterisitics of lambda expression:
		- optional lambda parameter data type  (int number)  -> {}
		- optional curly braces : () -> System.out.println("Without curly braces");
		- optional return statement: (x)-> x*x;

# How to implement lambda exrepssion?
	interface DummyService {
			void service();
	}

	class App {

		psvm(){

			DummyService service = () -> {System.out.println("Lambda Expression");};
		}
	}	

# Disadvantages:
1. we can only implement functional interfaces
2. We cannot override default methods.


# Few predefined functional interfaces
	1. Runnable --> void run()
	2. Comparable --> int compareTo()
	3. Comparator --> compare()
	4. Predicate --> boolean test(T t)
	5. Consumer ---> void accept(T t);
	6. Function ---->   R apply(T t);
	7. Supplier  ---> T get();

# Method Reference 
- it is used to give the reference of an method instead implementing the lambda expression.



# Lambda expression is a java 8 feature.






















